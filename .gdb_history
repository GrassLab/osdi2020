p ((uint64_t)&ustack_pool[task->id + 1] - sp_el0)  (uint64_t)&ustack_pool[i + 1])
p ((uint64_t)&ustack_pool[task->id + 1] - sp_el0)  (uint64_t)&ustack_pool[i + 1])
p (&ustack_pool[task->id + 1] - sp_el0)
p (&ustack_pool[task->id + 1] - sp_el0)
p (&ustack_pool[task->id + 1] - sp_el0)
p ((uint64_t)&ustack_pool[task->id + 1] - sp_el0)
p ((uint64_t)&ustack_pool[i + 1](uint64_t)&ustack_pool[task->id + 1] - sp_el0)
p ((uint64_t)&ustack_pool[task->id + 1] - sp_el0)
p ((uint64_t)&ustack_pool(uint64_t)&ustack_pool[task->id + 1] - sp_el0)
b sys2
c
c
b memcpy
c
c
p kstask_pool
p kstask_pool
b kstask_pool
b kstask_pool
p ((uint64_t)&ustack_pool(uint64_t)&ustack_pool[task->id + 1] - sp_el0)
b ustask_pool
b memcpy
c
c
b sys2
c
c
b ji
c
p $x0
x/10c 0x84370
x/10s 0x84370
p *((char *)x0 + i)
p *((char *)x0 + i)
si
c
c
c
c
c
c
c
c
c
cc
c
c
c
c
c
cc
c
c
c
c
c
c
c
c
c
c
c
c
c
c
cc
c
c
c
c
c
c
c
c
c
cc
c
c
c
c
c
cc
c
c
c
c
c
c
c
c
c
c
c
c
b ji
c
p x1
p $x1
p x1
b uart_write
c
p x1
p size
b uart_write
c
p size
si
p $x1
b uart_write
c
si
p $x1
c
c
b jiz
b ji
c
p *((char *)x0 + i)
p x0
p *x0
p x0
p *((char *)x0 + i)
b uart_write
c
b ji
c
b uart_write
c
p buf
p (uint64_t)buf
b uart_write
c
si
p $x0
p $x1
b exit
c
b exit
c
b _exit
c
si
b do_exit
c
si
b ru
c
si
p $x0
x/10i $x0
si
x/10i $x0
task->elr
p task->elr
p task
p task->id
b ru
c
c
p func
p task_pool[i].elr
b hh
c
set print pretty on
p *task
si
p *task
x/10i 0x824fc
b 108
c
p *task
b 111
c
p *task
si
p *task
si
p *task
b h
b h2
c
c
c
c
c
c
c
c
c
b h2
c
c
c
c
c
c
c
c
p task->id
si
p queue->head->task->priority
p task->priority
si
c
p task->priority
p queue->head->task->priority
si
p queue->head->task->priority
p task->priority
si
p queue->head
c
b h2
c
c
c
c
c
c
c
c
b h2
c
c
c
c
c
c
c
c
c
c
b h2
c
c
c
c
c
c
queue->head
p queue->head
p queue->head
p task->id
p start->next->task->priority 
p task->priority
b 49
c
b 50 
c
start
p start
p start->next->priority
p start->next->task->priority
si
b 52
c
