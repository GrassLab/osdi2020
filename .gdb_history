c
p pud
p *pud
p pud
p task->pgd
p *task->pgd
p *0x162fff
p 0x162fff
*(pud + (sp << (63 - 47) >> 39))
p *(pud + (sp << (63 - 47) >> 39))
p (pud + (sp << (63 - 47) >> 39))
p pud
pud + 0xfff
p pud + 0xfff
p pud + 0x1
p (sp << (63 - 47) >> 39)
p sp
p (sp << (63 - 47) >>(63 - 47) >> 39)
b stack
b task
c
p (pud + (sp << (63 - 47) >> (63 - 47) >> 39))
b stack
c
p (uint64_t*)((uint64_t)pud + (sp << (63 - 47) >> (63 - 47) >> 39))
p pmd
p *(uint64_t*)((uint64_t)pud + (sp << (63 - 47) >> (63 - 47) >> 39))
b 61
c
p *(uint64_t*)((uint64_t)pud + (sp << (63 - 47) >> (63 - 47) >> 39))
p (uint64_t*)((uint64_t)pmd + (sp << (63 - 38) >> (63 - 38) >> 30))
p pte
b stack
c
p (uint64_t*)((uint64_t)task->pgd + (sp << (63 - 47) >> (63 - 47) >> 39))
p task->pgd
p *task->pgd
p task->pgd
b stack
c
p (uint64_t*)((uint64_t)task->pgd + (sp << (63 - 47) >> (63 - 47) >> 39))
p (uint64_t*)((uint64_t)task->pgd + (sp << (63 - 47) >> (63 - 47) >> 39))
p task->pgd
b 62
c
p *task->pgd
p (uint64_t*)((uint64_t)task->pgd + (sp << (63 - 47) >> (63 - 47) >> 39))
p (uint64_t*)((uint64_t)task->pgd + (sp << (63 - 47) >> (63 - 47) >> 39))
p *(uint64_t*)((uint64_t)task->pgd + (sp << (63 - 47) >> (63 - 47) >> 39))
p *task->pgd
p *(uint64_t*)((uint64_t)pud + (sp << (63 - 38) >> (63 - 38) >> 30)) 
p *(uint64_t*)((uint64_t)pud + (sp << (63 - 38) >> (63 - 38) >> 30)) 
p (uint64_t*)((uint64_t)pud + (sp << (63 - 38) >> (63 - 38) >> 30))
p pmd
b 66
c
p pmd
p (uint64_t*)((uint64_t)pmd + (sp << (63 - 29) >> (63 - 29) >> 21))
p pte
p (uint64_t*)((uint64_t)pte + (sp << (63 - 20) >> (63 - 20) >> 12))
si
si
p *0x0000ffffffffe000
p *0x0000
p *0x0000ffffffffe000
p *0x0000ffffffffe001
p *0x0000ffffffffe002
p *0x0000ffffffffe000
p *0x0000ffffffffe000
p *0x0000ffffffffe000
si
b stack
c
tui
tui enable
p task->pgd
task->pgd
p *task->pgd
p (uint64_t*)((uint64_t)task->pgd + (sp << (63 - 47)
p (uint64_t*)((uint64_t)task->pgd + (sp << (63 - 47))
(uint64_t*)((uint64_t)task->pgd + (sp << (63 - 47) >> (63
help
info win
asm
layout next
layout next
layout next
layout next
layout next
p (uint64_t*)((uint64_t)task->pgd + (sp << (63 - 47) >> (63 - 47) >> 39))
p *(uint64_t*)((uint64_t)task->pgd + (sp << (63 - 47) >> (63 - 47) >> 39))
p *task->pgd
p *0x166000
p *0x1661ff
p *0x1671ff
p *0x1681ef
p *0x1681fe
p (uint64_t*)((uint64_t)pte + (sp << (63 - 20) >> (63 - 20) >> 12))
p (uint64_t)(stack_page->content) 
si
si
p 80x0000ffffffffe000
p *0x0000ffffffffe000
p *0b1
p *0b111111111111111111111111111111111110000000000000
p task->pgd
p *task->pgd
p task->pgd
p task->pgd + 0xffff000000000000
p *(task->pgd + 0xffff000000000000)
p *(task->pgd + 0xffff0000000000000)
p *(task->pgd + 0xffff000000000000)
p (*task->pgd + 0xffff000000000000)
p (task->pgd + 0xffff000000000000)
p (task->pgd + 0xffff00000000000)
p (task->pgd + 0xffff00000000000*2)
p *(task->pgd + 0xffff00000000000*2)
p *(task->pgd + 0xffff00000000000*2)
0xffff000000161000
p *0xffff000000161000
p *0xffff000000161fff
p *0xffff000000161fff
p *0xffff000000161fff
p *0xffff000000161fff
p *0xffff000000161fff
p *0xffff000000161fff
b stack
c
0xffff000040080000
p task->pgd
p *0x161000
p *0x161fff
p pud
p (uint64_t)pud
p (uint64_t)pud | 0x11
p (uint64_t)pud | 0b11
p *0x1611ff
p (uint64_t*)((uint64_t)task->pgd + (sp << (63 - 47) >> (63 - 47) >> 39))
p *0x1661ff
p *0x1671ff
p *0x1681fe
p *0x16100
p *0x161000
p *0x162000
p *0x163000
p *0x164000
si
p 0x0
p 0x1
p x/10i 0
x/10i 0
p * 0x0000ffffffffe000
p *0x0000ffffffffe000
p task
p task->gdp
p task->pgd
p *0x1611ff
p *0x161000
p 0x161000
p *0x161000
p *0x161000
p 0x1
p *0x161000
p *0x161000
p *0x162000

p *0xffff000000161000
p *0xffff0000001611ff
p *0xffff0000001661ff
p *0xffff0000001671ff
p *0xffff0000001681ff
p *0xffff0000001681fe
p *0xffff0000001681f9
p *0xffff00000016810
p *0xffff0000001681f0
p *0xffff0000001681fe
p *0xffff000000165000
p *0x0000ffffffffe000
p *0x0000000
p *0x0000001
p *0x0000002
p *0x0001002
p *0x0002002
p *0x0012002
p *0x0112002
p *0x1112002
p *0x1112002
b task
c
p 80x0000ffffffffe000
p 80x0000ffffffffe000
p *0x0000ffffffffe000
p 0x0
x/10i 0
b task
c
p 80x0000ffffffffe000
p *0x0000ffffffffe000
c
b switch_to
c
si
p $x2
si
c
b task
c
b do_exec
c
si
b 159
c
b do_exec
c
b 155
c
b 157
c
si
b b
c
p user_page->content
b switch_to
c
c
b context_switch
c
si
p next->pgd
si
p $x4
b switch_to
c
c
si
p $x2
x/10 $x2
x/10i $x2
si
b switch_to_user_mode
c
b user_context
c
si
p $x1
b user_context
c
c
p $x0
b switch_to_user_mode
c
b 155
c
p func
p *task->utask
p task->utask
